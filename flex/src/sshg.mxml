<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
                label="SSHg Configuration Service"
                pageTitle="SSHg Configuration Service"
                width="100%"
                height="100%"
                layout="vertical"
                initialize="setupInitialLocale()">

    <mx:Style source="styles/style.css" />

    <mx:Script>

      // UI related imports
      import mx.controls.Alert;
      import mx.managers.PopUpManager;
      import flash.display.DisplayObject;

      // Remoting suff imports
      import mx.messaging.ChannelSet;
      import mx.messaging.channels.SecureAMFChannel;
      import mx.rpc.AbstractOperation;
      import mx.rpc.events.FaultEvent;
      import mx.rpc.events.ResultEvent;
      import mx.rpc.remoting.mxml.RemoteObject;

      import net.zengrong.logging.Firebug;

      import org.ufsoft.sshg.i18n.Locale;
      import org.ufsoft.sshg.models.AuthenticatedUser;
      import org.ufsoft.sshg.events.TranslationEvent;
      import org.ufsoft.sshg.events.AuthenticationEvent;
      import org.ufsoft.sshg.components.AuthDialog;
      //import org.ufsoft.sshg.components.UsersList;

      private var authDialog    : AuthDialog;
      public var cookie         : SharedObject;
      private var _currentChild : DisplayObject;

      private var locale        : Locale;
      private var user          : AuthenticatedUser;
      //private var usersList     : UsersList;

      [Event(name="ConnectionLost", type="Event")]

      private function setupInitialLocale():void {
        cookie = SharedObject.getLocal("SSHg");
        Firebug.debug("Cookie:", cookie.data);
        locale = Locale.getInstance();
        locale.addEventListener(TranslationEvent.LOADED, localeLoaded);
        locale.load(cookie.data.locale || 'en_US');
        addEventListener(AuthenticationEvent.NEEDED, authenticationNeeded);
        addEventListener(AuthenticationEvent.SEND, authenticate);
      }

      private function localeLoaded(event:TranslationEvent) : void {
        locale.removeEventListener(TranslationEvent.LOADED, localeLoaded);
        Firebug.debug("Should have loaded locale???");
        Firebug.debug("Locale Chain:", resourceManager.localeChain);


        // Test with a fake user for existing session
        dispatchEvent(new AuthenticationEvent(
          AuthenticationEvent.SEND,
          new AuthenticatedUser(
            cookie.data.username || '',
            '', // password
            cookie.data.locale || 'en_US'
            )
          )
        );
      }

      private function authenticationNeeded(event:Event) : void {
        authDialog = new AuthDialog();
        if ( user ) {
          authDialog.user = user;
        }
        authDialog.addEventListener(AuthenticationEvent.SEND, authenticate);
        PopUpManager.addPopUp(authDialog, DisplayObject(this), true);
      }

      protected function authenticate(event:AuthenticationEvent) : void {
        user = event.user;
        var operation: AbstractOperation=getOperation('auth.login',
                                                      authenticateSuccess,
                                                      authenticateFailure);
        operation.send(event.user);
      }

      protected function authenticateFailure(event:FaultEvent) : void {
        dispatchEvent(new AuthenticationEvent(AuthenticationEvent.FAILURE));
        if (event.fault.faultCode == 'AuthenticationNeeded') {
          dispatchEvent(new AuthenticationEvent(AuthenticationEvent.NEEDED));
        } else {
          var errorMsg : String=resourceManager.getString(
            "sshg", "Authentication Failed {0}", [event.fault.faultCode]
          );
          Alert.show(event.fault.faultDetail, errorMsg);
        }
      }

      protected function authenticateSuccess(event:ResultEvent) : void {
        logout.addEventListener("click", doLogout);
        logout.enabled = true;
        PopUpManager.removePopUp(authDialog);
        dispatchEvent(new AuthenticationEvent(AuthenticationEvent.SUCESS));
      }

      protected function doLogout(event:Event) : void {
        var operation: AbstractOperation=getOperation('auth.logout', doLogoutSucess);
        operation.send();
      }

      protected function doLogoutSucess(event:ResultEvent) : void {
        user = null;
        logout.enabled = false;
        dispatchEvent(new AuthenticationEvent(AuthenticationEvent.NEEDED));
      }

      public function getService() : RemoteObject {
        var url : String='https://{server.name}:{server.port}/services';
        var channel : SecureAMFChannel=new SecureAMFChannel("pyamf-channel", url);
        // Create a channel set and add your channel(s) to it
        var channels : ChannelSet=new ChannelSet();
        channels.addChannel(channel);

        // Create a new remote object and set channels
        var remoteObject : RemoteObject=new RemoteObject("SSHg");

        remoteObject.showBusyCursor = true;
        remoteObject.channelSet = channels;
        remoteObject.addEventListener(FaultEvent.FAULT, onServiceFault);
        return remoteObject;
      }

      public function getOperation(
        endpoint:String,
        successListenerFunction:Function,
        failureListenerFunction:Function=null):AbstractOperation
      {
        var remoteObj : RemoteObject=getService();
        var operation : AbstractOperation=remoteObj.getOperation(endpoint);
        operation.addEventListener(ResultEvent.RESULT, successListenerFunction);
        if ( failureListenerFunction!=null ) {
          operation.addEventListener(FaultEvent.FAULT, failureListenerFunction);
        } else {
          operation.addEventListener(FaultEvent.FAULT, onServiceFault);
        }
        return operation
      }

      /**
       * Service reported an error.
       *
       * @param event Event containing error information.
       */
      protected function onServiceFault(event : FaultEvent) : void {
        Firebug.debug(0, event.fault.faultCode);
        if (event.fault.faultCode == 'AuthenticationNeeded') {
          dispatchEvent(new AuthenticationEvent(AuthenticationEvent.NEEDED));
        } else if (event.fault.faultCode == 'Client.Error.MessageSent') {
            dispatchEvent(new Event("ConnectionLost"));
            Alert.show("Problem communicating with server!");
        } else if (event.fault.faultCode == 'Channel.Call.Failed') {
            dispatchEvent(new Event("ConnectionLost"));
            Alert.show("Problem communicating with server!");
        } else {
          var errorMsg : String=event.fault.faultCode;
          Alert.show(event.fault.faultDetail, errorMsg);
        }
      }

      private function switchContent(content:DisplayObject): void {
        if ( _currentChild ) {
          mainContent.removeChild(_currentChild);
        }
        _currentChild = content;
        mainContent.addChild(content);
      }

      private function showUsersList(event:Event):void {
        /*usersList = new UsersList();
        switchContent(usersList);*/
      }

    </mx:Script>
    <mx:ApplicationControlBar width="100%" dock="true" id="appControlBar">
        <mx:HBox width="100%">
            <mx:Button id="show_users" click="showUsersList(event)"
                       label='{resourceManager.getString("sshg", "Users")}'/>
            <mx:Button id="add_user"
                       label='{resourceManager.getString("sshg", "Add User")}'/>
            <mx:Button id="show_repos"
                       label='{resourceManager.getString("sshg", "Repositories")}'/>
            <mx:Button id="add_repos"
                       label='{resourceManager.getString("sshg", "Add Repository")}'/>
            <mx:Spacer width="100%"/>
            <mx:Button id="logout"
                       label='{resourceManager.getString("sshg", "Logout")}'/>
        </mx:HBox>
    </mx:ApplicationControlBar>
    <mx:Box id="mainContent" width="100%" height="100%"/>

</mx:Application>
